	For the structures like array list and single-linked list, the performance traversing each to find a certain string is a pain because basically all indexes and nodes have to be check in a line from head to tail. These timings are similar but not exact because array list traversing is a bit faster as neighboring index do not need to be check where as they do in single-linked lists. Binary Tree working on a sorted list act in similar to way to the other structures as it creates a long list from greatest to least, so the performance is quite similar.

	Data structures like a Binary Tree performing on a sorted and balanced list are very different. This due to the fact that in a balanced tree we no longer need to traverse in a straight line, but instead checking whether our find(String) is greater or less then a root node and children thereafter. This way is actually the fastest way to find( ) a random string from our large list. Now for array list and single-linked list, the order of input data doesn't matter because in the end our created structure traverses by checking every index or node in the order given from our text file. There is though the fact that if we are looking for a certain random string, it could very well be at the beginning of the balanced text file and at the end of the sorted. This event would be the only factor affecting performance times.

	The data I predicted was a performance of O[n] for all structures except Binary Tree testing balanced which would be O[log n]. The performances matched my predictions fairly well in fact, the only thing I forgot to predict was that the array list would perform slightly faster then the single-linked list. 